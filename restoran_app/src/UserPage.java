
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Koneksi;
import model.MUser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Client
 */
public class UserPage extends javax.swing.JInternalFrame {
    
   List<MUser> userList = new ArrayList<>();
    
    
        /**
     * Creates new form NewJInternalFrame
     */
    public UserPage() {
        initComponents();
        TampilkanData();
        
        
        
         addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
    public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
        formInternalFrameActivated(evt);
    }
   });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Tid = new javax.swing.JTextField();
        Tnama = new javax.swing.JTextField();
        Tusername = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        Crole = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Ttambah = new javax.swing.JButton();
        Bupdate = new javax.swing.JButton();
        Bdelete = new javax.swing.JButton();
        Tpassword = new javax.swing.JPasswordField();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        Tusername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TusernameActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("USER PAGE");

        Crole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID User", "Nama", "Username", "Password", "Jabatan"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(table);

        jLabel2.setText("ID User");

        jLabel3.setText("Nama ");

        jLabel4.setText("Username");

        jLabel5.setText("Jabatan");

        jLabel6.setText("Password");

        Ttambah.setText("Tambah");
        Ttambah.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TtambahMouseClicked(evt);
            }
        });

        Bupdate.setText("Update");
        Bupdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BupdateMouseClicked(evt);
            }
        });

        Bdelete.setText("Delete");
        Bdelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BdeleteMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(262, 262, 262)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(Crole, 0, 141, Short.MAX_VALUE)
                                        .addComponent(Tid))
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5))
                                .addGap(45, 45, 45)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Tnama, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3))
                                        .addGap(36, 36, 36)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(Tusername, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel6)
                                    .addComponent(Tpassword, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(Ttambah, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59)
                                .addComponent(Bupdate, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63)
                                .addComponent(Bdelete, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Tid, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Tnama, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Tusername, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Crole, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Tpassword, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Bdelete, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(Ttambah, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(Bupdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   private void loadRoles() {
    Connection konek = Koneksi.ConnectDB();
    String query = "SHOW COLUMNS FROM user WHERE Field = 'role'";

    try {
        PreparedStatement pst = konek.prepareStatement(query);
        ResultSet rs = pst.executeQuery();
        Crole.removeAllItems();

        if (rs.next()) {
            String enumValues = rs.getString("Type");
            enumValues = enumValues.substring(5, enumValues.length() - 1);
            String[] roles = enumValues.replace("'", "").split(",");

            for (String role : roles) {
                Crole.addItem(role);
            }

            if (Crole.getItemCount() > 0) {
                for (int i = 0; i < Crole.getItemCount(); i++) {
                    if (Crole.getItemAt(i).equalsIgnoreCase("admin")) {
                        Crole.setSelectedIndex(i);
                        break;
                    }
                }
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal memuat data role: " + e.getMessage());
        e.printStackTrace();
    } finally {
        try {
            if (konek != null) konek.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}



    private void TusernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TusernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TusernameActionPerformed

    private String generateIdUser() {
    String lastId = null;
    String newId = null;
    Connection konek = Koneksi.ConnectDB();

    String query = "SELECT id_user FROM user ORDER BY id_user DESC LIMIT 1";

    try {
        PreparedStatement pst = konek.prepareStatement(query);
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            lastId = rs.getString("id_user");
            int idNumber = Integer.parseInt(lastId.split("-")[1]);
            idNumber++;
            newId = String.format("USN-%03d", idNumber);
        } else {
            newId = "USN-001"; 
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        e.printStackTrace();
    }

    return newId;
}

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {                                            
        Tid.setText(generateIdUser());
    Tid.setEnabled(false);
        loadRoles(); 

    }
    private void TtambahMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TtambahMouseClicked
       Tid.setText(generateIdUser());
    
    String nama = Tnama.getText();
    String username = Tusername.getText();
    String password = Tpassword.getText();
    
    String role = (String) Crole.getSelectedItem();
    
    if (nama.isEmpty() || username.isEmpty() || password.isEmpty() || role == null) {
        JOptionPane.showMessageDialog(this, "Harap isi semua kolom!");
        return;
    }

    

    Connection konek = Koneksi.ConnectDB();
    String query = "INSERT INTO user (id_user, nama_user, username, password, role) VALUES (?, ?, ?, ?, ?)";
    
    try {
        PreparedStatement pst = konek.prepareStatement(query);
        pst.setString(1, Tid.getText());
        pst.setString(2, nama);
        pst.setString(3, username);
        pst.setString(4, password);
        pst.setString(5, role);
        
        int result = pst.executeUpdate();
        
        if (result > 0) {
            JOptionPane.showMessageDialog(this, "Data berhasil disimpan");

            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.addRow(new Object[]{Tid.getText(), nama, username, role});
            
            clearForm();
        } else {
            JOptionPane.showMessageDialog(this, "Gagal menyimpan data");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        e.printStackTrace();
    }
    
    
        
    }//GEN-LAST:event_TtambahMouseClicked

    private void BupdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BupdateMouseClicked
        // TODO add your handling code here:
    String id = Tid.getText();
    String nama = Tnama.getText();
    String username = Tusername.getText();
    String password = new String(Tpassword.getPassword()); 
    String role = (String) Crole.getSelectedItem(); 

    if (id.isEmpty() || nama.isEmpty() || username.isEmpty() || password.isEmpty() || role == null) {
        JOptionPane.showMessageDialog(this, "Harap isi semua kolom!");
        return;
    }

    Connection konek = Koneksi.ConnectDB();
    String query = "UPDATE user SET nama_user = ?, username = ?, password = ?, role = ? WHERE id_user = ?";

    try {
        PreparedStatement pst = konek.prepareStatement(query);
        pst.setString(1, nama);
        pst.setString(2, username);
        pst.setString(3, password);
        pst.setString(4, role);
        pst.setString(5, id);

        int result = pst.executeUpdate();
        if (result > 0) {
            JOptionPane.showMessageDialog(this, "Data berhasil diupdate");
            clearForm();
            TampilkanData();
        } else {
            JOptionPane.showMessageDialog(this, "Gagal mengupdate data");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_BupdateMouseClicked

    private void BdeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BdeleteMouseClicked
        // TODO add your handling code here:
        
        int selectedRow = table.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Pilih data yang ingin dihapus terlebih dahulu!");
        return;
    }

    String idUser = (String) table.getValueAt(selectedRow, 0);

    int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus data user dengan ID " + idUser + "?", "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.NO_OPTION) {
        return;
    }

    Connection konek = Koneksi.ConnectDB();
    String query = "DELETE FROM user WHERE id_user = ?";

    try {
        PreparedStatement pst = konek.prepareStatement(query);
        pst.setString(1, idUser);

        int result = pst.executeUpdate();
        if (result > 0) {
            JOptionPane.showMessageDialog(this, "Data berhasil dihapus");

            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.removeRow(selectedRow);

            clearForm();
            Tid.setText(generateIdUser());
        } else {
            JOptionPane.showMessageDialog(this, "Gagal menghapus data");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_BdeleteMouseClicked
private void TampilkanData() {
    DefaultTableModel model = (DefaultTableModel) table.getModel();
    model.setRowCount(0); 

    ArrayList<String[]> userList = new ArrayList<>();

    String query = "SELECT id_user, nama_user, username, password, role FROM user";

    Connection konek = Koneksi.ConnectDB();

    try {
        Statement stmt = konek.createStatement();
        ResultSet rs = stmt.executeQuery(query);

        while (rs.next()) {
            String id = rs.getString("id_user");
            String nama = rs.getString("nama_user");
            String username = rs.getString("username");
            String password = rs.getString("password");
            String role = rs.getString("role");

            userList.add(new String[]{id, nama, username, password, role});
        }

        for (String[] row : userList) {
            model.addRow(row);
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        e.printStackTrace();
    } finally {
        try {
            if (konek != null) konek.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


}

    
    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
    int selectedRow = table.getSelectedRow();
    if (selectedRow != -1) { 
        String id = (String) table.getValueAt(selectedRow, 0);
        String nama = (String) table.getValueAt(selectedRow, 1);
        String username = (String) table.getValueAt(selectedRow, 2);
        String password = (String) table.getValueAt(selectedRow, 3);
        String role = (String) table.getValueAt(selectedRow, 4);

        Tid.setText(id);
        Tnama.setText(nama);
        Tusername.setText(username);
        Tpassword.setText(password);

        Crole.setSelectedItem(role);  

        Bupdate.setEnabled(true);
        Bdelete.setEnabled(true);
    }

    }//GEN-LAST:event_tableMouseClicked
private void clearForm() {
    Tid.setText(generateIdUser());
    Tnama.setText("");
    Tusername.setText("");
    Tpassword.setText("");
    Crole.setSelectedIndex(0);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bdelete;
    private javax.swing.JButton Bupdate;
    private javax.swing.JComboBox<String> Crole;
    private javax.swing.JTextField Tid;
    private javax.swing.JTextField Tnama;
    private javax.swing.JPasswordField Tpassword;
    private javax.swing.JButton Ttambah;
    private javax.swing.JTextField Tusername;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
