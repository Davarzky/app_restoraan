
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Koneksi;
import model.MPelanggan;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Client
 */
public class PelangganPage extends javax.swing.JInternalFrame {
   List<MPelanggan> pelangganList = new ArrayList<>();
    /**
     * Creates new form PelangganPage
     */
    public PelangganPage() {
        initComponents();
        TampilkanData();
        AmbilData();
        
                   addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
    public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
        formInternalFrameActivated(evt);
    }
   });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Tid = new javax.swing.JTextField();
        Tnama = new javax.swing.JTextField();
        THp = new javax.swing.JTextField();
        RBLaki = new javax.swing.JRadioButton();
        RBPerempuan = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        Talamat = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        Btambah = new javax.swing.JButton();
        Bupdate = new javax.swing.JButton();
        Bdelete = new javax.swing.JButton();

        buttonGroup1.add(RBLaki);
        RBLaki.setText("Laki-laki");

        buttonGroup1.add(RBPerempuan);
        RBPerempuan.setText("Perempuan");

        jLabel1.setText("Pelanggan Page");

        jLabel2.setText("ID Pelanggan");

        jLabel3.setText("Nama Pelanggan");

        jLabel4.setText("No HP");

        jLabel5.setText("Alamat");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Pelanggan", "Nama", "No HP", "Jenis Kelamin", "Alamat"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        Btambah.setText("jButton1");
        Btambah.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtambahMouseClicked(evt);
            }
        });

        Bupdate.setText("jButton2");
        Bupdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BupdateMouseClicked(evt);
            }
        });

        Bdelete.setText("jButton3");
        Bdelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BdeleteMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(266, 266, 266)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Tid, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(RBLaki)
                                    .addComponent(RBPerempuan)
                                    .addComponent(jLabel2))
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(Tnama)
                                        .addComponent(Talamat, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5))
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(THp, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Btambah, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)
                                .addComponent(Bupdate, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(49, 49, 49)
                                .addComponent(Bdelete, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Tid, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Tnama, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(THp, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(RBLaki)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RBPerempuan))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Talamat, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Bdelete, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(Btambah, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                        .addComponent(Bupdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtambahMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtambahMouseClicked
        // TODO add your handling code here:
        Tid.setText(generateIdPelanggan()); 
    String nama = Tnama.getText();
    String alamat = Talamat.getText();
    String teleponStr = THp.getText();

    
    String jenisKelamin = "";
    if (RBLaki.isSelected()) {
        jenisKelamin = "L";
    } else if (RBPerempuan.isSelected()) {
        jenisKelamin = "P";
    } else {
        JOptionPane.showMessageDialog(this, "Pilih jenis kelamin!");
        return; 
    }

    if (nama.isEmpty() || alamat.isEmpty() || teleponStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Harap isi semua kolom!");
        return; 
    }

    if (!teleponStr.matches("\\d+")) {
        JOptionPane.showMessageDialog(this, "Format nomor telepon salah. Harap masukkan angka.");
        return; 
    }

    String id = generateIdPelanggan();

    Connection konek = Koneksi.ConnectDB();
    String query = "INSERT INTO pelanggan (id_pelanggan, nama_pelanggan, jenis_kelamin, noHp, alamat) VALUES (?, ?, ?, ?, ?)";

    try {
        PreparedStatement pst = konek.prepareStatement(query);
        pst.setString(1, id); 
        pst.setString(2, nama); 
        pst.setString(3, jenisKelamin); 
        pst.setString(4, teleponStr); 
        pst.setString(5, alamat); 

        int result = pst.executeUpdate();
        if (result > 0) {
            JOptionPane.showMessageDialog(this, "Data berhasil disimpan");

            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.addRow(new Object[]{id, nama, jenisKelamin, teleponStr, alamat});

            clearForm();
        } else {
            JOptionPane.showMessageDialog(this, "Gagal menyimpan data");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_BtambahMouseClicked

    private void BupdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BupdateMouseClicked
        String id = Tid.getText();
    String nama = Tnama.getText();
    String alamat = Talamat.getText();
    String teleponStr = THp.getText();
    String jenisKelamin = "";

    if (RBLaki.isSelected()) {
        jenisKelamin = "L";
    } else if (RBPerempuan.isSelected()) {
        jenisKelamin = "P";
    } else {
        JOptionPane.showMessageDialog(this, "Pilih jenis kelamin!");
        return;
    }

    if (id.isEmpty() || nama.isEmpty() || alamat.isEmpty() || teleponStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Harap isi semua kolom!");
        return;
    }

    if (!teleponStr.matches("\\d+")) {
        JOptionPane.showMessageDialog(this, "Format nomor telepon salah. Harap masukkan angka.");
        return;
    }

    int telepon = Integer.parseInt(teleponStr); 

    Connection konek = Koneksi.ConnectDB();
    String query = "UPDATE pelanggan SET nama_pelanggan = ?, alamat = ?, noHp = ?, jenis_kelamin = ? WHERE id_pelanggan = ?";

    try {
        PreparedStatement pst = konek.prepareStatement(query);
        pst.setString(1, nama);
        pst.setString(2, alamat);
        pst.setInt(3, telepon);
        pst.setString(4, jenisKelamin);
        pst.setString(5, id); 

        int result = pst.executeUpdate();
        if (result > 0) {
            JOptionPane.showMessageDialog(this, "Data berhasil diupdate");
            TampilkanData(); 
        } else {
            JOptionPane.showMessageDialog(this, "Gagal mengupdate data");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_BupdateMouseClicked

    private void BdeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BdeleteMouseClicked
        
         int selectedRow = table.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Pilih data yang ingin dihapus terlebih dahulu!");
        return; 
    }

    String idPelanggan = (String) table.getValueAt(selectedRow, 0);

    int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus data pelanggan dengan ID " + idPelanggan + "?", "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.NO_OPTION) {
        return; 
    }

    Connection konek = Koneksi.ConnectDB();
    String query = "DELETE FROM pelanggan WHERE id_pelanggan = ?";

    try {
        PreparedStatement pst = konek.prepareStatement(query);
        pst.setString(1, idPelanggan); 

        int result = pst.executeUpdate();
        if (result > 0) {
            JOptionPane.showMessageDialog(this, "Data berhasil dihapus");

            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.removeRow(selectedRow); 

            clearForm(); 

            Tid.setText(generateIdPelanggan());
        } else {
            JOptionPane.showMessageDialog(this, "Gagal menghapus data");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_BdeleteMouseClicked

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
         int row = table.getSelectedRow(); 
    if (row >= 0) {
        try {
            String id_pelanggan = table.getValueAt(row, 0).toString(); 
            String nama_pelanggan = table.getValueAt(row, 1).toString(); 
            String alamat = table.getValueAt(row, 2).toString(); 
            String telepon = table.getValueAt(row, 3).toString(); 
            String jenis_kelamin = table.getValueAt(row, 4).toString(); 

            Tid.setText(id_pelanggan);
            Tnama.setText(nama_pelanggan);
            Talamat.setText(alamat);
            THp.setText(telepon);
            
            if (jenis_kelamin.equals("Laki-laki")) {
                RBLaki.setSelected(true);  
            } else if (jenis_kelamin.equals("Perempuan")) {
                RBPerempuan.setSelected(true); 
            }

            Btambah.setEnabled(false);  
            Bupdate.setEnabled(true);   
            Bdelete.setEnabled(true);   
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    } else {
        JOptionPane.showMessageDialog(null, "Harap pilih baris terlebih dahulu.", "Tidak Ada Baris yang Dipilih", JOptionPane.WARNING_MESSAGE);
    }
    
    }//GEN-LAST:event_tableMouseClicked
 private String generateIdPelanggan() {
  String lastId = null;
    String newId = null;
    Connection konek = Koneksi.ConnectDB();

    String query = "SELECT id_pelanggan FROM pelanggan ORDER BY id_pelanggan DESC LIMIT 1";

    try {
        PreparedStatement pst = konek.prepareStatement(query);
        ResultSet rs = pst.executeQuery();
        
        if (rs.next()) {
            lastId = rs.getString("id_pelanggan");
            int idNumber = Integer.parseInt(lastId.split("-")[1]);
            idNumber++;
            newId = String.format("P-%03d", idNumber);
        } else {
            newId = "P-001"; 
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        e.printStackTrace();
    }

    return newId;
}
  private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {                                            
        Tid.setText(generateIdPelanggan());
    Tid.setEnabled(false);
    RBLaki.setSelected(true);
    }
 public void AmbilData() {
    try (Connection DB = Koneksi.ConnectDB();
         PreparedStatement New = DB.prepareStatement("SELECT * FROM pelanggan");
         ResultSet Hasil = New.executeQuery()) {

        pelangganList.clear(); 

        while (Hasil.next()) {
            pelangganList.add(new MPelanggan(
                    Hasil.getString("id_pelanggan"),      
                    Hasil.getString("nama_pelanggan"),    
                    Hasil.getString("noHp"),             
                    Hasil.getString("jenis_kelamin"),    
                    Hasil.getString("alamat")            
            ));
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error fetching data: " + e.getMessage());
        e.printStackTrace();
    }
}
 private void TampilkanData() {
    DefaultTableModel tabel = (DefaultTableModel) this.table.getModel();
    tabel.setRowCount(0); 

    for (MPelanggan pelanggan : pelangganList) {
        Object[] row = new Object[5]; 
        row[0] = pelanggan.getId_pelanggan();
        row[1] = pelanggan.getNama_pelanggan();
        row[2] = pelanggan.getNoHp();
        row[3] = pelanggan.getJenis_kelamin();
        row[4] = pelanggan.getAlamat();
        tabel.addRow(row);
    }

    table.setModel(tabel); 
}

private void clearForm() {
    // Kosongkan semua field teks
    Tid.setText("");
    Tnama.setText("");
    THp.setText("");
    Talamat.setText("");
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bdelete;
    private javax.swing.JButton Btambah;
    private javax.swing.JButton Bupdate;
    private javax.swing.JRadioButton RBLaki;
    private javax.swing.JRadioButton RBPerempuan;
    private javax.swing.JTextField THp;
    private javax.swing.JTextField Talamat;
    private javax.swing.JTextField Tid;
    private javax.swing.JTextField Tnama;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
